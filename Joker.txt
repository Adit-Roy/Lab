FCFS..........................

#include<stdio.h>
int main()
{
    int processor_id[100],n;
    int at[100],bt[100],wt[100],tat[100],ct[100],sum=0,act=0,atat=0,awt=0;
    float CT,WT,TAT;
    printf("Enter number of processors: ");
    scanf("%d",&n);
    printf("Enter processor id of all processors:\n");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&processor_id[i]);
    }
    printf("Enter arrival time of all processor: ");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&at[i]);
    }
    printf("Enter brust time of all processor: ");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&bt[i]);
    }
    //CT Calculation
    for(int i=0;i<n;i++)
    {
        sum+=bt[i];
        ct[i]=sum;
        act+=ct[i];
    }
    //TAT Calculation
    for(int i=0;i<n;i++)
    {
        tat[i]=ct[i]-at[i];
        atat+=tat[i];
    }
    //WT Calculation
    for(int i=0;i<n;i++)
    {
        wt[i]=tat[i]-bt[i];
        awt+=wt[i];
    }
    printf("Processor ID\tArrival Time\tBrust Time\tComputation Time\tTurn Around Time\tWaiting Time\n");
    for(int i=0;i<n;i++)
    {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t\t%d\t\t\t%d\n",processor_id[i],at[i],bt[i],ct[i],tat[i],wt[i]);
    }
    CT=(act*1.0)/n;
    TAT=(atat*1.0)/n;
    WT=(awt*1.0)/n;
    printf("Average Computation Time: %.2f\n",CT);
    printf("Average Turn Around Time: %.2f\n",TAT);
    printf("Average Waiting Time: %.2f\n",WT);
    return 0;
}


Enter number of processors: 3
Enter processor id of all processors:
1
2
3
Enter arrival time of all processor: 0 1 2
Enter brust time of all processor: 3 3 2
Processor ID    Arrival Time    Brust Time      Computation Time        Turn Around Time        Waiting Time
1               0               3               3                       3                       0
2               1               3               6                       5                       2
3               2               2               8                       6                       4
Average Computation Time: 5.67
Average Turn Around Time: 4.67
Average Waiting Time: 2.00



Shortest Job First........................
#include<stdio.h>
#include<limits.h>
#define N 100005
int n;
int id[N];
int burst_time[N];
int arrival_time[N];
int waiting_time[N];
int computation_time[N];
int turn_around_time[N];

void SJF()
{
    int complete=0;
    int current_time=0;
    int index,minimum;
    double total_waiting_time=0.0;
    double total_turn_around_time=0.0;
    double total_computation_time=0.0;
    index=-1;
    minimum=INT_MAX;
    while(complete<n)
    {
        index=-1;
        minimum=INT_MAX;
        for(int i=0;i<n;i++)
        {
            if(arrival_time[i]<=current_time && computation_time[i] == 0)
            {
                if(burst_time[i]<minimum)
                {
                    index=i;
                    minimum=burst_time[i];
                }
            }
        }
        if (index!=-1)
        {
            complete++;
            current_time+=burst_time[index];
            computation_time[index]=current_time;
            turn_around_time[index]=computation_time[index] - arrival_time[index];
            waiting_time[index]=turn_around_time[index] - burst_time[index];
            total_computation_time+=computation_time[index];
            total_waiting_time+=waiting_time[index];
            total_turn_around_time+=turn_around_time[index];
        }
        else
        {
            current_time++;
        }
    }
    printf("Processor ID\tArrival Time\tBrust Time\tComputation Time\tTurn Around Time\tWaiting Time\n");
    for(int i=0;i<n;i++)
    {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t\t%d\t\t\t%d\n",id[i],arrival_time[i],burst_time[i],computation_time[i],turn_around_time[i],waiting_time[i]);
    }
    printf("Average Waiting Time: %.2lf\n",total_waiting_time/n);
    printf("Average Turn Around Time: %.2lf\n",total_turn_around_time/n);
    printf("Average computation Time: %.2lf\n",total_computation_time/n);
}
int main()
{
    printf("Number of Processes: ");
    scanf("%d",&n);
    printf("Process Ids:\n");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&id[i]);
    }
    printf("Process Burst Times:\n");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&burst_time[i]);
    }
    printf("Process Arrival Times:\n");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&arrival_time[i]);
    }
    SJF();
    return 0;
}



Number of Processes: 4
Process Ids:
1
2
3
4
Process Burst Times:
3
4
2
3
Process Arrival Times:
0
1
2
5
Processor ID    Arrival Time    Brust Time      Computation Time        Turn Around Time        Waiting Time
1               0               3               3                       3                       0
2               1               4               12                      11                      7
3               2               2               5                       3                       1
4               5               3               8                       3                       0
Average Waiting Time: 2.00
Average Turn Around Time: 5.00
Average computation Time: 7.00


Priority Scheduling.....................................

#include <stdio.h>
#include <stdlib.h>
#define N 100005
int n;
int priority[N],id[N],burst_time[N],arrival_time[N],waiting_time[N],computation_time[N],turn_around_time[N];

void swap(int *a,int *b)
{
    int temp=*a;
    *a=*b;
    *b=temp;
}
int compare(int a_priority,int a_arrival_time,int b_priority,int b_arrival_time)
{
    if(a_priority < b_priority)
    {
        return -1;
    }
    else if(a_priority == b_priority)
    {
        if(a_arrival_time < b_arrival_time)
        {
            return -1;
        }
        else if(a_arrival_time == b_arrival_time)
        {
            return 0;
        }
        else
        {
            return 1;
        }
    }
    else
    {
        return 1;
    }
}
void sortProcesses(int *priorities, int *arrival_times, int n)
{
    for(int i=0;i<n-1;i++)
    {
        for(int j=0;j<n-i-1;j++)
        {
            if (compare(priorities[j], arrival_times[j], priorities[j + 1], arrival_times[j + 1]) > 0)
            {
                swap(&priorities[j], &priorities[j + 1]);
                swap(&arrival_times[j], &arrival_times[j + 1]);
                swap(&id[j], &id[j + 1]);
                swap(&burst_time[j], &burst_time[j + 1]);
            }
        }
    }
}
void Priority()
{
    sortProcesses(priority, arrival_time, n);
    double total_waiting_time = 0.0;
    double total_turn_around_time = 0.0;
    double total_computation_time = 0.0;
    for(int i=0;i<n;i++)
    {
        if(i == 0)
        {
            computation_time[i] = burst_time[i];
        }
        else
        {
            computation_time[i] = computation_time[i - 1] + burst_time[i];
        }
        turn_around_time[i] = computation_time[i] - arrival_time[i];
        waiting_time[i] = turn_around_time[i] - burst_time[i];
        total_waiting_time += waiting_time[i];
        total_computation_time+=computation_time[i];
        total_turn_around_time += turn_around_time[i];
    }
    printf("Processor ID\tPriority\tArrival Time\tBrust Time\tComputation Time\tTurn Around Time\tWaiting Time\n");
    for(int i=0;i<n;i++)
    {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t\t%d\t\t\t%d\n",id[i],priority[i],arrival_time[i],burst_time[i],computation_time[i],turn_around_time[i],waiting_time[i]);
    }
    printf("Average Waiting Time: %.2lf\n", total_waiting_time / n);
    printf("Average Computation Time: %.2lf\n", total_computation_time / n);
    printf("Average Turn Around Time: %.2lf\n", total_turn_around_time / n);
}
int main()
{
    printf("Number of Processes: ");
    scanf("%d", &n);
    printf("Process Ids:\n");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&id[i]);
    }
    printf("Process Burst Times:\n");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&burst_time[i]);
    }
    printf("Process Arrival Times:\n");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&arrival_time[i]);
    }
    printf("Process Priorities:\n");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&priority[i]);
    }
    Priority();
    return 0;
}



Number of Processes: 5
Process Ids:
1
2
3
4
5
Process Burst Times:
11
28
2
10
16
Process Arrival Times:
0
5
12
2
9
Process Priorities:
2
0
3
1
4
PID             Pri             AT              BT              CT              TAT
                WT
2               0               5               28              33              28
                0
4               1               2               10              43              41
                31
1               2               0               11              54              54
                43
3               3               12              2               56              44
                42
5               4               9               16              72              63
                47
Average Waiting Time: 32.60
Average Computation Time: 51.60
Average Turn Around Time: 46.00





Round Robin.......................................
#include <stdio.h>
#define N 100005
int n,quantum_time;
int id[N],burst_time[N],arrival_time[N],waiting_time[N],computation_time[N],turn_around_time[N],remaining_time[N];

void RoundRobin()
{
    int complete,current_time,change;
    double total_waiting_time=0.0;
    double total_turn_around_time=0.0;
    double total_computation_time=0.0;

    for(int i = 0; i < n; i++)
        remaining_time[i] = burst_time[i];

    complete=0;
    current_time=0;

    while (complete < n)
    {
        change = 0;
        for (int i = 0; i < n; i++)
        {
            if (arrival_time[i]<=current_time && remaining_time[i]>0)
            {
                if (remaining_time[i]<=quantum_time)
                {
                    complete++;
                    current_time+=remaining_time[i];

                    computation_time[i]=current_time;
                    turn_around_time[i]=computation_time[i] - arrival_time[i];
                    waiting_time[i]=turn_around_time[i] - burst_time[i];

                    total_waiting_time+=waiting_time[i];
                    total_computation_time+=computation_time[i];
                    total_turn_around_time+=turn_around_time[i];

                    remaining_time[i] = 0;
                }
                else
                {
                    current_time += quantum_time;
                    remaining_time[i] -= quantum_time;
                }
                change++;
            }
        }
        if (change == 0)
        {
            current_time++;
        }
    }
    printf("Processor ID\tArrival Time\tBrust Time\tComputation Time\tTurn Around Time\tWaiting Time\n");
    for(int i=0;i<n;i++)
    {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t\t%d\t\t\t%d\n",id[i],arrival_time[i],burst_time[i],computation_time[i],turn_around_time[i],waiting_time[i]);
    }
    printf("Average Waiting Time: %.2lf\n", total_waiting_time / n);
    printf("Average Computation Time: %.2lf\n", total_computation_time / n);
    printf("Average Turn Around Time: %.2lf\n", total_turn_around_time / n);
}

int main()
{
    printf("Number of Processes: ");
    scanf("%d",&n);
    printf("Quantum time: ");
    scanf("%d",&quantum_time);
    printf("Process Ids:\n");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&id[i]);
    }
    printf("Process Burst Times:\n");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&burst_time[i]);
    }
    printf("Process Arrival Times:\n");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&arrival_time[i]);
    }
    RoundRobin();
    return 0;
}



Number of Processes: 6
Quantum time: 2
Process Ids:
1
2
3
4
5
6
Process Burst Times:
7
4
15
11
20
9
Process Arrival Times:
0
1
2
3
4
4
Processor ID    Arrival Time    Brust Time      Computation Time        Turn Around Time     Waiting Time
1               0               7               35                      35
                        28
2               1               4               16                      15
                        11
3               2               15              60                      58
                        43
4               3               11              53                      50
                        39
5               4               20              66                      62
                        42
6               4               9               50                      46
                        37
Average Waiting Time: 33.33
Average Computation Time: 46.67
Average Turn Around Time: 44.33



Bounded Buffer.......................
#include <iostream>
#include <queue>
#include <thread>
#include <semaphore.h>

using namespace std;

queue<int> buffer;
sem_t emptySlots;
sem_t fullSlots;

void producer() {
   for (int i = 1; i <= 5; ++i) {
      sem_wait(&emptySlots);
      buffer.push(i);
      cout << "Produced: " << i << endl;
      sem_post(&fullSlots);
      this_thread::sleep_for(chrono::milliseconds(500));
   }
}

void consumer() {
   while (true) {
      sem_wait(&fullSlots);
      int data = buffer.front();
      buffer.pop();
      cout << "Consumed: " << data << endl;
      sem_post(&emptySlots);
      this_thread::sleep_for(chrono::milliseconds(1000));
   }
}

int main() {
   // Max 5 empty slots
   sem_init(&emptySlots, 0, 5);
   // Initially, no full slots in the buffer
   sem_init(&fullSlots, 0, 0);

   thread producerThread(producer);
   thread consumerThread(consumer);

   producerThread.join();
   consumerThread.join();

   sem_destroy(&emptySlots);
   sem_destroy(&fullSlots);

   return 0;
}


Counting Semaphore......................

#include <iostream>
#include <queue>
#include <thread>
#include <semaphore.h>

using namespace std;

queue<int> buffer;
sem_t emptySlots;
sem_t fullSlots;

void producer() {
   for (int i = 1; i <= 5; ++i) {
      sem_wait(&emptySlots);
      buffer.push(i);
      cout << "Produced: " << i << endl;
      sem_post(&fullSlots);
      this_thread::sleep_for(chrono::milliseconds(500));
   }
}

void consumer() {
   while (true) {
      sem_wait(&fullSlots);
      int data = buffer.front();
      buffer.pop();
      cout << "Consumed: " << data << endl;
      sem_post(&emptySlots);
      this_thread::sleep_for(chrono::milliseconds(1000));
   }
}

int main() {
   // Max 5 empty slots
   sem_init(&emptySlots, 0, 5);
   // Initially, no full slots in the buffer
   sem_init(&fullSlots, 0, 0);

   thread producerThread(producer);
   thread consumerThread(consumer);

   producerThread.join();
   consumerThread.join();

   sem_destroy(&emptySlots);
   sem_destroy(&fullSlots);

   return 0;
}


Best Fit.............
#include <stdio.h>
void bestFit(int blockSize[], int m, int processSize[], int n)
{
    int allocation[n];
    for (int i = 0; i < n; i++)
    {
        allocation[i] = -1;
    }
    for (int i = 0; i < n; i++)
    {
        int bestIdx = -1;
        for (int j = 0; j < m; j++)
        {
            if (blockSize[j] >= processSize[i])
            {
                if (bestIdx == -1)
                    bestIdx = j;
                else if (blockSize[bestIdx] > blockSize[j])
                    bestIdx = j;
            }
        }
        if (bestIdx != -1)
        {
            allocation[i] = bestIdx;
            blockSize[bestIdx] -= processSize[i];
        }
    }
    printf("\nProcess No.\tProcess Size\tBlock no.\n");
    for (int i = 0; i < n; i++)
    {
        printf(" %d\t\t%d\t\t", i + 1, processSize[i]);
        if (allocation[i] != -1)
            printf("%d", allocation[i] + 1);
        else
            printf("Not Allocated");
        printf("\n");
    }
}
int main()
{
    int m,n;
    int blockSize[100],processSize[100];
    printf("Enter blocksize: ");
    scanf("%d",&m);
    printf("Enter Blocks: ");
    for(int i=0;i<m;i++)
    {
        scanf("%d",&blockSize[i]);
    }
    printf("Enter processsize: ");
    scanf("%d",&n);
    printf("Enter Processes: ");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&processSize[i]);
    }
    bestFit(blockSize, m, processSize, n);

    return 0;
}

Enter blocksize: 5
Enter Blocks: 100 500 200 300 600
Enter processsize: 4
Enter Processes: 217 227 117 426

Process No.     Process Size    Block no.
 1              217             4
 2              227             2
 3              117             3
 4              426             5



First Fit......................

#include <stdio.h>
#include <string.h>
void firstFit(int blockSize[], int m, int processSize[], int n)
{
    int allocation[n];
    memset(allocation, -1, sizeof(allocation));
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            if (blockSize[j] >= processSize[i])
            {
                allocation[i] = j;
                blockSize[j] -= processSize[i];
                break;
            }
        }
    }
    printf("\nProcess No.\tProcess Size\tBlock no.\n");
    for (int i = 0; i < n; i++)
    {
        printf(" %d\t\t%d\t\t", i + 1, processSize[i]);
        if (allocation[i] != -1)
        {
            printf("%d", allocation[i] + 1);
        }
        else
        {
            printf("Not Allocated");
        }
        printf("\n");
    }
}
int main()
{
    int m,n;
    int blockSize[100],processSize[100];
    printf("Enter blocksize: ");
    scanf("%d",&m);
    printf("Enter Blocks: ");
    for(int i=0;i<m;i++)
    {
        scanf("%d",&blockSize[i]);
    }
    printf("Enter processsize: ");
    scanf("%d",&n);
    printf("Enter Processes: ");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&processSize[i]);
    }
    firstFit(blockSize, m, processSize, n);
    return 0;
}


Enter blocksize: 5
Enter Blocks: 100 500 200 300 600
Enter processsize: 4
Enter Processes: 217 227 117 426

Process No.     Process Size    Block no.
 1              217             2
 2              227             2
 3              117             3
 4              426             5


Worst Fit...............................

#include <stdio.h>
#include <string.h>
void worstFit(int blockSize[], int m, int processSize[], int n)
{
    int allocation[n];
    memset(allocation, -1, sizeof(allocation));
    for (int i = 0; i < n; i++)
    {
        int wstIdx = -1;
        for (int j = 0; j < m; j++)
        {
            if (blockSize[j] >= processSize[i]) {
                if (wstIdx == -1)
                    wstIdx = j;
                else if (blockSize[wstIdx] < blockSize[j])
                    wstIdx = j;
            }
        }
        if (wstIdx != -1)
        {
            allocation[i] = wstIdx;
            blockSize[wstIdx] -= processSize[i];
        }
    }
    printf("\nProcess No.\tProcess Size\tBlock no.\n");
    for (int i = 0; i < n; i++)
    {
        printf(" %d\t\t%d\t\t", i + 1, processSize[i]);
        if (allocation[i] != -1)
        {
            printf("%d", allocation[i] + 1);
        }
        else
        {
            printf("Not Allocated");
        }
        printf("\n");
    }
}
int main()
{
    int m,n;
    int blockSize[100],processSize[100];
    printf("Enter blocksize: ");
    scanf("%d",&m);
    printf("Enter Blocks: ");
    for(int i=0;i<m;i++)
    {
        scanf("%d",&blockSize[i]);
    }
    printf("Enter processsize: ");
    scanf("%d",&n);
    printf("Enter Processes: ");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&processSize[i]);
    }
    worstFit(blockSize, m, processSize, n);
    return 0;
}


Enter blocksize: 5
Enter Blocks: 100 500 200 300 600
Enter processsize: 4
Enter Processes: 217 227 117 426

Process No.     Process Size    Block no.
 1              217             5
 2              227             2
 3              117             5
 4              426             Not Allocated



Optimal Page Representation............................

#include <stdio.h>
#include <stdbool.h>
int pn;
int predict(int page[], int fr[], int pn, int fn, int index)
{
    int res = -1, farthest = index;
    for (int i = 0; i < fn; i++)
    {
        int j;
        for (j = index; j < pn; j++)
        {
            if (fr[i] == page[j])
            {
                if (j > farthest)
                {
                    farthest = j;
                    res = i;
                }
                break;
            }
        }
        if (j == pn)
            return i;
    }
    return (res == -1) ? 0 : res;
}
bool search(int key, int fr[], int fn)
{
    for (int i = 0; i < fn; i++)
        if (fr[i] == key)
            return true;
    return false;
}
void opr(int page[], int pn, int fn)
{
    float rh,rf;
    int fr[fn];
    int hit = 0;
    int filled = 0;
    for (int i = 0; i < fn; i++)
    {
        fr[i] = -1;
    }
    for (int i = 0; i < pn; i++)
    {
        if (search(page[i], fr, fn))
        {
            hit++;
            continue;
        }
        if (filled < fn)
        {
            fr[filled] = page[i];
            filled++;
        }
        else
        {
            int j = predict(page, fr, pn, fn, i + 1);
            fr[j] = page[i];
        }
    }
    rh=((float)hit/pn)*100.0;
    rf=((float)(pn-hit)/pn)*100.0;
    printf("Hits = %d\n", hit);
    printf("Misses = %d\n", pn - hit);
    printf("Hits = %.2f%\n", rh);
    printf("Misses = %.2f%\n", rf);
}
int main()
{
    printf("Enter the number of pages: ");
    scanf("%d", &pn);
    int page[pn];
    printf("Enter the pages: ");
    for (int i = 0; i < pn; i++)
    {
        scanf("%d", &page[i]);
    }
    int fn;
    printf("Enter the number of frames: ");
    scanf("%d", &fn);
    opr(page, pn, fn);
    return 0;
}

// 7 0 1 2 0 3 0 4 2 3 0 3 0 3 2 1 2 0 1 7 0 1

Enter the number of pages: 7 0 1 2 0 3 0 4 2 3 0 3 0 3 2 1 2 0 1 7 0 1
Enter the pages: Enter the number of frames: Hits = 2
Misses = 5
Hits = 28.57
Misses = 71.43

